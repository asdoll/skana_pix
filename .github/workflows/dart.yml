# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Dart

on:
  push:
    branches: [ "main", "rev_theme" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
      
      - uses: actions/setup-java@v4
        with:
              distribution: 'oracle'
              java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Create the Keystore
        env:
          KEYSTORE_BASE64: ${{ secrets.KEY_BASE64 }}
          KEY_PROPERTIES: ${{ secrets.KEY_PROPERTIES_BASE64 }}
        run: |
          # import keystore from secrets
          ls -all
          echo $KEYSTORE_BASE64 | base64 -di > android/app/key.jks
          echo $KEY_PROPERTIES | base64 -di > android/key.properties

      - name: Install dependencies
        run: flutter pub get

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: dart analyze || true

      # Build apk.
      - name: Build APK
        run: flutter build apk --release
    
      # Upload generated apk to the artifacts.
      - uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: build/app/outputs/apk/release/app-release.apk

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      #- name: Run tests
      #  run: dart example/api_example.dart
